# -*- coding: utf-8 -*-
# WR Ltd https://cloud.wrltd.ca

from odoo import api, fields, models, tools, _


class SaleOrder(models.Model):
    _inherit = "sale.order"


    # add new state to_approve, duplicate action_confirm button with state to_approve for group sales manager 
    state = fields.Selection([
        ('draft', 'Quotation'),
        ('sent', 'Quotation Sent'),
        ('to_approve', 'To Approve'),
        ('sale', 'Sales Order'),
        ('done', 'Locked'),
        ('cancel', 'Cancelled'),
        ], string='Status', readonly=True, copy=False, index=True, track_visibility='onchange', default='draft')
#    can_approve_user_id = fields.Many2one('res.users', compute='_default_so_approval_assign', string='Request Approval From', store=True)
    can_approve_user_id = fields.Many2one('res.users', string='Request Approval From', store=True)
    user_can_approve_so = fields.Boolean(compute='_compute_can_approve_so', readonly=True, default=False)


    @api.multi
    def _compute_can_approve_so(self):
        order_discount = 0
        for order in self:
            for line in order.order_line:
                if line.discount:
                    order_discount += line.discount
            if self.env.user.discount_limit:
                if int(self.env.user.discount_limit) > int(order_discount):
                    order.user_can_approve_so = True
                    order._default_so_approval_assign()
                else:
                    order.user_can_approve_so = False


        
        return(order.user_can_approve_so)


    @api.multi
    def _default_so_approval_assign(self):
        order_discount = 0.0
        for order in self:
            for line in order.order_line:
                if line.discount:
                    order_discount += line.discount
            if order_discount and not order.user_can_approve_so:
                can_approve_default_assign = self.env['res.users'].sudo().search([('discount_limit', '>', order_discount)], limit=1)
                if can_approve_default_assign:
                    order.can_approve_user_id = can_approve_default_assign
            

    @api.multi
    def action_confirm(self):
        res = super(SaleOrder, self).action_confirm()
        for order in self:
            if not order.user_can_approve_so:
                order.state = 'to_approve'
                order.approval_request_notification()

        return res

    @api.multi
    def action_approve_so(self):
        for order in self:
            order.action_confirm()

    @api.multi
    def approval_request_notification(self):
        template = self.env['mail.template'].search([('model', '=', 'sale.order'), ('name', '=', 'Sale order Approval Notification')], limit=1)
        self.env['mail.template'].browse(template.id).send_mail(self.id,force_send=True)
        return True

